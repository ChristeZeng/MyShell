*************用户手册**************
欢迎查看用户手册!
一. 编译与执行
编译$ make
执行$ ./myshell <参数>

二、重点部分
1. I/O重定向
实现I/O重定向的方法比较容易，只需要把标准读入或标准输出替换为对应文件读入或对应文件输出即可，既可以使用open()函数打开需要重定向的文件，再使用dup2()函数进行文件流的替换；也可以使用close()函数关闭原标准输入/输出，再使用open()函数打开重定向文件。检测是否需要重定向也比较简单，在命令需要分析时，加入对">"，"< " ，" >> "的识别，当识别到这些符号时，为这条命令加上需要对应操作的信号。
//输入重定向
close(0);
open(InPath, O_RDONLY);
//输出重定向(覆盖)
close(1);
open(OutPath, O_WRONLY | O_CREAT | O_TRUNC, 0666);
//输出重定向(追加)
close(1);
open(OutPath, O_RDWR | O_CREAT | O_APPEND, 0666);

2.管道操作
管道本质上就是实现进程之间的通信，其中匿名管道主要用于实现父进程与子进程之间的通信，若是只有简单的二级管道的情形("CMD1 | CMD 2")，我们可以简单的利用父子进程之间的匿名管道通信实现，具体实现方式是首先fork一个实现CMD2命令的子进程，在此子进程中再fork一个实现CMD1的子进程，并且利用waitpid函数使得只有当CMD1进程执行完才会去执行CMD2，执行完之后使用dup2函数将CMD1的输出重定向到管道，并将CMD2的输入重定向到管道
pid_t pid1 = fork()
//子进程
if(pid1 == 0)
{
    //执行CMD1
}
//父进程
else if(pid1 > 0)
{
    waitpid(pid1, NULL, 0);
    pid_t pid2 = fork()
    if(pid2 == 0)
    {
     	//执行CMD2   
    }
}
但这个方法在处理多级管道，也就是"CMD1 | CMD2 | CMD3 ..."的形式时会遇到较大的麻烦，第一是难以组织dup2的重定向，第二是管道输入输出端的开闭问题容易出错，实现多级管道的一个简便易行的方法是使用一个自行创建的共享文件来存储中间结果，过程上类似于二级管道，只不过最开始fork的父进程用于创建和读写共享中间文件，此父进程不断递归调用fork来建立和回收新进程，例如调用fork建立执行CMD1的进程1，输出写入共享中间文件，回收进程1后再fork新进程执行CMD2，并且从共享文件读取输入，再将结果输出到共享文件，整个过程就可以通过共享文件简单完成。总体的多级管道实现过程如下所示
pid_t pid = fork()
//子进程
if(pid == 0)
{
    for(从管道的第一条命令到非最后一条)
        第一条的输入需要从标准输入获取
        打开管道文件以读取或输出
    最后一条指令需要输出到标准输出
}
//主进程
else
    增加进程表
    改变环境
    waitpid等待子进程结束

3. 程序环境
使用C/C++语言进行此次实验，程序环境的管理便利就是一大优势，C/C++允许使用库来调用Linux系统保存的环境变量，并且是全局变量，允许程序的各个部分与各个进程使用和修改，通过getenv()函数我们可以获取当前环境变量，setenv()函数可以修改环境变量。

4. 后台程序执行
后台程序的执行首先离不开的就是进程表，而且此进程表是要能够被整个程序的所有子进程共同维护和修改的，所以仅仅将其设为全局的远远不够，因为这样只能被子进程继承，但子进程进行的修改不能影响到父进程，相当于没有修改进程表的信息，所以在此实验中，我使用了shmget这一系列函数申请与维护一个共享内存，将进程表存放在共享内存中，这样上述的问题就得以解决。
有了进程表，命令分析时读取到"&"符号就将当前的进程置上后台执行的标记，使用fork...exec框架执行它时，主进程不再使用waitpid的阻塞主进程选项，而是使用waitpid不会阻塞子进程的WNOHANG选项，当前父进程退出后，子进程可能仍在运行，当然只让子进程继续运行是远远不够的，我们还需知道它在后台何时结束，以便更新进程表同时避免僵尸进程出现。在这里我利用了子进程结束后会发出一个SIGCHLD信号的特点，通过捕捉SIGCHLD信号和后台运行的标记这两大特征，实现了后台程序的运行。
当然后台程序不止包括使用"&"将其送入后台的进程，还包括使用CTRL+Z挂起在后台暂停的进程，我们可以识别STGSTP信号后，使用kill达到暂停的目的，将进程暂挂在后台之后，我们可以使用两种指令将其调出，一种是使其在后台继续执行的bg命令，一种是将其调入前台执行的fg命令，两种命令都依靠kill向挂起的进程发送SIGCONT信号实现，唯一不同的是，使用fg指令还会使用waitpid阻塞主进程，使主进程等待此进程的完成，而bg无需阻塞，直接在后台完成即可。

三. 命令操作手册
1. bg命令
解释：后台执行一个挂起的后台进程
范例：bg
2. cd命令
解释：无参数显示当前目录，有参数切换文件目录并更改环境变量
范例：cd    
范例：cd <dir>
3. clr命令
解释：清理当前屏幕内容
范例：clr
4. dir命令
解释：无参数显示当前文件夹内容，有参数显示参数文件夹内容
范例：dir   
范例：dir <dir>
5. echo命令
解释：显示参数内容
范例：echo Hello World
6. exec命令
解释：使用参数命令代替当前进程
范例：exec ls -l
7. exit
解释：退出shell
范例：exit
8. fg
解释：将后台进程转到前台执行
范例：fg
9. help
解释：输出用户手册并使用more进行控制
范例：help
10. jobs
解释：显示所有的后台进程及其状态
范例：jobs
11. pwd
解释：显示当前路径
范例：pwd
12. set
解释：显示所有的环境变量
范例：set   
13. shift
解释：读入参数并左移参数位后输出，无参数表示默认左移1位
范例：shift    
范例：shift 3
14. test
解释：比较字符串或数字之间的大小关系是否成立
范例：test aaa = aaa
范例：test bbb != aaa
范例：test 1 -eq 1
范例：test 1 -ne 2
范例：test 1 -lt 1
范例：test 1 -gt 1
范例：test 1 -le 1
范例：test 1 -ge 1
15. time
解释：输出当前系统时间
范例：time
16. umask
解释：无参数时显示当前掩码，有参数则设置掩码为参数
范例：umask
范例：umask 0666
17. unset
解释：删除参数对应的环境变量
范例：unset SHELL